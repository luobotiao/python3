#!/bin/env python
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
####################################################################
#
# Eclipse Summary plotter based on ERT-Python
#  http://ert.nr.no/wiki/index.php/ERT-Python
#
# Syntax:
#  summaryplot.py [<options>] <vectorstoplot> <datafilestoread>
#
# vectorstoplot is a list of vectors to be plotted in the syntax
#  <vector>[:<wellname>]
# For more vector possibilities, issue 'summary.x --list ECLFILE.DATA'
#
# datafilestoread is a list of Eclipse *.DATA files to be read
#
# Command line arguments are assumed to be Eclipse DATA-files as long
# as the command line argument is an existing file. If not, it is assumed
# to be a vector to plot. Thus, vectors and datafiles can be mixed, but beware..#
#
# Options:
#  -h Include historic data (only looks in the first
#     Eclipse deck given on the command line!)
#  -nl No label; to avoid the plot to be filled with labels 
#  -s Single plot, all vectors are put into the same plot.
#     Axes will not be adjusted.
#
# Copyright: Statoil ASA 2011 
#  
# $Id: summaryplot 413 2013-03-22 14:34:43Z havb $
#

import ert.ecl.ecl as ecl
import itertools # for manual color cycling
import matplotlib.pyplot
import sys, os, time
import re
from multiprocessing import Process



# Entire functionality is wrapped in a function
# to allow running the plotter in a subprocess.
# (again needed in order to support ctrl-c)
def summaryplotter(*args):
    vectors = []      # strings
    datafiles = []    # strings
    summaryfiles = [] # EclSum objects
    rstfiles = []     # EclRst objects
    gridfiles = []    # EclGrid objects
    includehistory = False # default behaviour
    nolabel        = False # default behaviour
    singleplot     = False # default behaviour
    maxlegends     = 5 # Do not show more than the first five simulations in the legend 

    for arg in args[1:]:
        if (arg == "-h"):
            includehistory=True
            continue
        if (arg == "-nl"):
            nolabel=True
            continue
        if (arg == "-s"):
            singleplot=True
            continue
        if (arg == "-l"):
            maxlegends=99999 # Don't truncate legend before this number is reached
            continue
        

        # Try to parse command line arg as a summary file,
        # try as a vector if not.
        sum = ecl.EclSum(arg)
        if sum:
            datafiles.append(arg)
            summaryfiles.append(sum)
        else: 
            vectors.append(arg)

    if len(summaryfiles) == 0:
        print("Error: No summary files found")
        sys.exit(1)
        
    # We support wildcards in summary vectors. The wildcards will be matched against
    # the existing vectors in the first Eclipse deck mentioned on the command
    # line
    matchedsummaryvectors = []
    restartvectors = []
    for v in vectors:
        if not summaryfiles[0].keys(v):
            # Check if it is a restart vector with syntax <vector>:<i>,<j>,<k> aka SOIL:40,31,33
            if re.match(r'^[A-Z]+:[0-9]+,[0-9]+,[0-9]+$', v):
                print("Found restart vector " + v)
                restartvectors.append(v)
            else:
                print("Warning: No summary or restart vectors matched " + v)
        matchedsummaryvectors.extend(summaryfiles[0].keys(v))


    # If we have any restart vectors defined, we must also load the restart files
    if restartvectors:
        for datafile in datafiles:
            rstfile = datafile.replace(".DATA", "")
            rstfile = rstfile + ".UNRST"
            gridfile = datafile.replace(".DATA", "")
            gridfile = gridfile + ".EGRID" # What about .GRID??
            print("Loading grid and restart file " + rstfile)
            # TODO: Allow some of the rstfiles to be missing
            # TODO: Handle missing rstfiles gracefully
            rst = ecl.EclFile(rstfile)
            grid = ecl.EclGrid(gridfile)
            rstfiles.append(rst)
            gridfiles.append(grid)
            print("done")

        
    if ((len(matchedsummaryvectors) + len(restartvectors)) == 0):
        print("Error: No vectors to plot")
        sys.exit(1)


    # Now it is time to prepare vectors from restart-data, quite time-consuming!!
    # Remember that SOIL should also be supported, but must be calculated on demand from SWAT and SGAS
    restartvectordata = {}
    restartvectordates = {}
    for v in restartvectors:
        print("Getting data for " + v + "...")
        match = re.match(r'^([A-Z]+):([0-9]+),([0-9]+),([0-9]+)$', v)
        dataname = match.group(1) # aka SWAT, PRESSURE, SGAS etc..
        i = int(match.group(2)) # Remember that these indices start on 1, not on zero!
        j = int(match.group(3))
        k = int(match.group(4))
        #print dataname, i, j, k
        restartvectordata[v] = {}
        restartvectordates[v] = {}
        for datafile_idx in range(0, len(datafiles)):
            active_index = gridfiles[datafile_idx].get_active_index(ijk=(i, j, k))
            restartvectordata[v][datafiles[datafile_idx]] = []
            restartvectordates[v][datafiles[datafile_idx]] = []

            # Loop over all restart steps
            last_step = list(range(rstfiles[datafile_idx].num_named_kw("SWAT")))[-1]
            for report_step in range(0, last_step+1):
                restartvectordates[v][datafiles[datafile_idx]].append(
                    rstfiles[datafile_idx].iget_restart_sim_time(report_step))
                if (dataname != "SOIL"):
                    restartvectordata[v][datafiles[datafile_idx]].append(
                        rstfiles[datafile_idx].iget_named_kw(dataname, report_step)[active_index])
                else:
                    swatvalue = rstfiles[datafile_idx].iget_named_kw("SWAT", report_step)[active_index]
                    sgasvalue = rstfiles[datafile_idx].iget_named_kw("SGAS", report_step)[active_index]
                    restartvectordata[v][datafiles[datafile_idx]].append(1 - swatvalue - sgasvalue)
                    
            #print restartvectordata[v][datafiles[datafile_idx]]
            #print restartvectordates[v][datafiles[datafile_idx]]
    # Data structure examples
    #restartvectordata["SOIL:1,1,1"]["datafile"] = [0.89, 0.70, 0.60, 0.55, 0.54]
    #restartvectortimes["SOIL:1,1,1"]["datafile"] = ["1 Jan 2011", "1 Jan 2012"] (NB dates are in format "datetime")
    # TODO: Fill restartvectordata with NaN's if restart data is missing
    
    
    # Make the plots
    pyplot = matplotlib.pyplot

    colors = itertools.cycle(['b', 'g', 'r', 'c', 'm', 'y', 'k'])
    for v in matchedsummaryvectors:

        # Only reset colour cycling if one plot pr vector is wanted.
        if singleplot==False:
            colors = itertools.cycle(['b', 'g', 'r', 'c', 'm', 'y', 'k'])
        
        if singleplot==False or v==matchedsummaryvectors[0]:
            pyplot.figure()
            pyplot.xlabel('Date')

        if singleplot==False:
            pyplot.title(v)
        else:
            pyplot.title("")
        
        # Look for historic vectors in first summaryfile
        if includehistory:
            s = summaryfiles[0]
            toks = v.split(":", 1)
            histvec=toks[0]+"H"
            if (len(toks)>1):
                histvec = histvec + ":" + toks[1]
            if histvec in s:
                pyplot.plot_date(s.get_mpl_dates(), s.get_values(histvec), 'k.')

        for s_idx in range(0,len(summaryfiles)):
            s = summaryfiles[s_idx]
            if v in s:
                if s_idx >= maxlegends: # Truncate legend if too many 
                    sumlabel = '_nolegend_'
                else:
                    if singleplot:
                        sumlabel = v + " " + s.case.lower()
                    else:
                        sumlabel = s.case.lower()

                cycledcolor = next(colors)
                pyplot.plot_date(s.get_mpl_dates(), s.get_values(v), xdate=True, ydate=False,
                                 ls='-', marker='None', color=cycledcolor, label=sumlabel)

        if not nolabel:
            pyplot.legend(loc='best')
    for v in restartvectors:

        # Only reset colour cycling if one plot pr vector is wanted.
        if singleplot==False:
            colors = itertools.cycle(['b', 'g', 'r', 'c', 'm', 'y', 'k'])
        
        if singleplot==False or (v==restartvectors[0] and len(matchedsummaryvectors)==0):
            pyplot.figure()
            pyplot.xlabel('Date')

        if singleplot==False:
            pyplot.title(v)
        else:
            pyplot.title("")

        for datafile_idx in range(0, len(datafiles)):
            cycledcolor = next(colors)
            if singleplot:
                rstlabel = v + " " + datafiles[datafile_idx].lower()
            else:
                rstlabel = datafiles[datafile_idx].lower()
                
            pyplot.plot_date(restartvectordates[v][datafiles[datafile_idx]],
                             restartvectordata[v][datafiles[datafile_idx]],
                             xdate=True, ydate=False, ls='-', marker='None',
                             color=cycledcolor, label=rstlabel)
        
        if not nolabel:
            pyplot.legend(loc='best')
    pyplot.show()



plotprocess = Process(target=summaryplotter, args=sys.argv)
plotprocess.start()
import tty, termios
fd = sys.stdin.fileno()
old_settings = termios.tcgetattr(fd)
print("Menu: 'q' = quit, 'r' = reload plots")
try:
    # change terminal settings to allow keyboard input without user pressing 'enter'
    tty.setcbreak(sys.stdin.fileno())
    ch = ''
    while (ch != 'q' and plotprocess.is_alive()):
        ch = sys.stdin.read(1)
        if (ch == 'r'):
            print("Reloading plot...\r") # Must use \r instead of \n since we have messed up terminal
            plotprocess.terminate()
            plotprocess = Process(target=summaryplotter, args=sys.argv)
            plotprocess.start()
except KeyboardInterrupt:
    pass

# We have messed up the terminal, remember to fix:
termios.tcsetattr(fd, termios.TCSADRAIN, old_settings) 

# Close plot windows (running in a subprocess)
plotprocess.terminate()
      

